generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64", "windows"]
}

datasource postgres {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  password        String
  isAdmin         Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  updatedPassword Boolean  @default(false)

  wishlist        Wishlist?

  // Santa pairing relations
  matchedSanta    User?    @relation("UserSanta", fields: [matchedSantaId], references: [id])
  matchedSantaId  Int?     @unique
  matchedBy       User?    @relation("UserSanta")

  Accepted        Boolean  @default(false)
  role            Role     @default(FRONT_OF_HOUSE)
  profilePicture  String

  // ðŸ‘‡ NEW back-relations for the Question model
  askedQuestions   Question[] @relation("AskerQuestions")
  receivedQuestions Question[] @relation("ReceiverQuestions")
}

enum Role {
  FRONT_OF_HOUSE
  BACK_OF_HOUSE
}

model Wishlist {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id])
  userId        Int           @unique
  pendingAccept Boolean       @default(true)
  items         WishlistItem[]

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model WishlistItem {
  id         Int       @id @default(autoincrement())
  wishlist   Wishlist  @relation(fields: [wishlistId], references: [id])
  wishlistId Int
  item       String
  createdAt  DateTime  @default(now())

  // ðŸ‘‡ NEW back-relation for Question model
  questions  Question[]
}

model AdminCode {
  id              Int       @id @default(autoincrement())
  eventDate       DateTime?
  matchSantaDate  DateTime?
  overview        String?
  code            String   @unique
}

model Question {
  id              Int      @id @default(autoincrement())
  askerId         Int
  receiverId      Int
  wishlistItemId  Int
  questionText    String
  answerText      String?
  isAnswered      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  asker        User         @relation("AskerQuestions", fields: [askerId], references: [id])
  receiver     User         @relation("ReceiverQuestions", fields: [receiverId], references: [id])
  wishlistItem WishlistItem @relation(fields: [wishlistItemId], references: [id])
}
